# code: language=ansible
---
- name: "Apt update cache"
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600 # 1 hr
  become: true

- name: "Create application directory {{ grafana_path }}"
  ansible.builtin.file:
    path: "{{ grafana_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  become: true

- name: "Create provisioning directory {{ grafana_path }}/provisioning/datasources"
  ansible.builtin.file:
    path: "{{ grafana_path }}/provisioning/datasources"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  become: true

- name: "Deploy grafana default dashboards"
  ansible.builtin.copy:
    src: "dashboards"
    dest: "{{ grafana_path }}"
    force: false

- name: "Deploy grafana default provisioning"
  ansible.builtin.copy:
    src: "provisioning"
    dest: "{{ grafana_path }}"
    force: false

- name: "Deploy grafana datasource configuration"
  ansible.builtin.template:
    src: "influxdb.yml"
    dest: "{{ grafana_path }}/provisioning/datasources/influxdb.yml"

- name: "Deploy grafana environment"
  ansible.builtin.template:
    src:  "grafana.env"
    dest: "{{ grafana_path }}/grafana.env"

- name: "Docker volume create 'grafana-data'"
  community.docker.docker_volume:
    name: "{{ deployment }}-grafana-data"

- name: "Start docker container"
  community.docker.docker_container:
    name: grafana
    image: grafana/grafana:latest
    restart_policy: unless-stopped
    hostname: grafana
    ports:
      - "3000:3000"
    env_file: "{{ grafana_path }}/grafana.env"
    volumes:
      - "{{ deployment }}-grafana-data:/var/lib/grafana"
      - "{{ grafana_path }}/provisioning/datasources:/etc/grafana/provisioning/datasources"
      - "{{ grafana_path }}/provisioning/dashboards:/etc/grafana/provisioning/dashboards"
      - "{{ grafana_path }}/dashboards:/var/lib/grafana/dashboards"
      - "{{ grafana_path }}/dashboards/home.json:/usr/share/grafana/public/dashboards/home.json"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5